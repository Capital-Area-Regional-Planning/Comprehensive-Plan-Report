moe <- get_moe_table(census_data_step2)
return(list(estimate = estimate, moe = moe))
}
acs_data_education_county <- get_acs_education("county", acs_year)
#function to transform a wide census df for easier proportion calculations
wide_to_narrow <- function(df) {
print(df)
narrow_df <- df %>%
select(GEOID, NAME, summary_est, summary_moe, starts_with("est")) %>%
pivot_longer(
cols = c(starts_with("est")),
names_to = "variable",
names_prefix = "est_",
values_to = "estimate"
) %>%
left_join(
census_data_step1 %>%
select(GEOID, starts_with("moe")) %>%
pivot_longer(
cols = c(starts_with("moe")),
names_to = "variable",
names_prefix = "moe_",
values_to = "moe"
),
join_by(variable == variable, GEOID == GEOID)
)
return (narrow_df)
}
acs_data_education_cur <- get_acs_education("county subdivision", acs_year)
#educational info
get_acs_education <- function(geo_type, year) {
census_data_step1 <- get_acs(
geography = geo_type,
variables = acs_var_education,
year = year,
output = "wide",
state = state,
county = county,
survey = "acs5",
geometry = F
) %>%
get_est_moe_sums(
sum_names = c("less_9th", "no_diploma_9th_12th", "high_school_equivalent", "some_college", "associate", "bachelor", "graduate"),
sum_cols = list(
c("B15003_002", "B15003_003", "B15003_004", "B15003_005", "B15003_006", "B15003_007", "B15003_008", "B15003_009", "B15003_010", "B15003_011", "B15003_012"),
c("B15003_013", "B15003_014", "B15003_015", "B15003_016"),
c("B15003_017", "B15003_018"),
c("B15003_019", "B15003_020"),
c("B15003_021"),
c("B15003_022"),
c("B15003_023", "B15003_024", "B15003_025")
)
) %>%
rename(summary_est = B15003_001E,
summary_moe = B15003_001M)
#transform data for easier MOE calculation
census_data_step2 <- census_data_step1 %>%
wide_to_narrow() %>%
mutate(
estimate_prop = estimate/summary_est * 100,
moe_prop = moe_prop(estimate, summary_est, moe, summary_moe)*100) %>%
get_cv_reliability()
#rename variables
mutate(variable = case_when(variable == "less_9th" ~ "Less than 9th grade",
variable == "no_diploma_9th_12th" ~ "9th to 12th grade, no diploma",
variable == "high_school_equivalent" ~ "High school graduate (or equivalent)",
variable == "some_college" ~ "Some college, no degree",
variable == "associate" ~ "Associate's degree",
variable == "bachelor" ~ "Bachelor's degree",
variable == "graduate" ~ "Graduate or professional degree"))
estimate <- get_estimate_table(census_data_step2)
moe <- get_moe_table(census_data_step2)
return(list(estimate = estimate, moe = moe))
}
acs_data_education_county <- get_acs_education("county", acs_year)
#educational info
get_acs_education <- function(geo_type, year) {
census_data_step1 <- get_acs(
geography = geo_type,
variables = acs_var_education,
year = year,
output = "wide",
state = state,
county = county,
survey = "acs5",
geometry = F
) %>%
get_est_moe_sums(
sum_names = c("less_9th", "no_diploma_9th_12th", "high_school_equivalent", "some_college", "associate", "bachelor", "graduate"),
sum_cols = list(
c("B15003_002", "B15003_003", "B15003_004", "B15003_005", "B15003_006", "B15003_007", "B15003_008", "B15003_009", "B15003_010", "B15003_011", "B15003_012"),
c("B15003_013", "B15003_014", "B15003_015", "B15003_016"),
c("B15003_017", "B15003_018"),
c("B15003_019", "B15003_020"),
c("B15003_021"),
c("B15003_022"),
c("B15003_023", "B15003_024", "B15003_025")
)
) %>%
rename(summary_est = B15003_001E,
summary_moe = B15003_001M)
#transform data for easier MOE calculation
census_data_step2 <- census_data_step1 %>%
wide_to_narrow() %>%
mutate(
estimate_prop = estimate/summary_est * 100,
moe_prop = moe_prop(estimate, summary_est, moe, summary_moe)*100) %>%
get_cv_reliability() %>%
#rename variables
mutate(variable = case_when(variable == "less_9th" ~ "Less than 9th grade",
variable == "no_diploma_9th_12th" ~ "9th to 12th grade, no diploma",
variable == "high_school_equivalent" ~ "High school graduate (or equivalent)",
variable == "some_college" ~ "Some college, no degree",
variable == "associate" ~ "Associate's degree",
variable == "bachelor" ~ "Bachelor's degree",
variable == "graduate" ~ "Graduate or professional degree"))
estimate <- get_estimate_table(census_data_step2)
moe <- get_moe_table(census_data_step2)
return(list(estimate = estimate, moe = moe))
}
acs_data_education_county <- get_acs_education("county", acs_year)
#function to transform a wide census df for easier proportion calculations
wide_to_narrow <- function(df) {
narrow_df <- df %>%
select(GEOID, NAME, summary_est, summary_moe, starts_with("est")) %>%
pivot_longer(
cols = c(starts_with("est")),
names_to = "variable",
names_prefix = "est_",
values_to = "estimate"
) %>%
left_join(
df %>%
select(GEOID, starts_with("moe")) %>%
pivot_longer(
cols = c(starts_with("moe")),
names_to = "variable",
names_prefix = "moe_",
values_to = "moe"
),
join_by(variable == variable, GEOID == GEOID)
)
return (narrow_df)
}
#educational info
get_acs_education <- function(geo_type, year) {
census_data_step1 <- get_acs(
geography = geo_type,
variables = acs_var_education,
year = year,
output = "wide",
state = state,
county = county,
survey = "acs5",
geometry = F
) %>%
get_est_moe_sums(
sum_names = c("less_9th", "no_diploma_9th_12th", "high_school_equivalent", "some_college", "associate", "bachelor", "graduate"),
sum_cols = list(
c("B15003_002", "B15003_003", "B15003_004", "B15003_005", "B15003_006", "B15003_007", "B15003_008", "B15003_009", "B15003_010", "B15003_011", "B15003_012"),
c("B15003_013", "B15003_014", "B15003_015", "B15003_016"),
c("B15003_017", "B15003_018"),
c("B15003_019", "B15003_020"),
c("B15003_021"),
c("B15003_022"),
c("B15003_023", "B15003_024", "B15003_025")
)
) %>%
rename(summary_est = B15003_001E,
summary_moe = B15003_001M)
#transform data for easier MOE calculation
census_data_step2 <- census_data_step1 %>%
wide_to_narrow() %>%
mutate(
estimate_prop = estimate/summary_est * 100,
moe_prop = moe_prop(estimate, summary_est, moe, summary_moe)*100) %>%
get_cv_reliability() %>%
#rename variables
mutate(variable = case_when(variable == "less_9th" ~ "Less than 9th grade",
variable == "no_diploma_9th_12th" ~ "9th to 12th grade, no diploma",
variable == "high_school_equivalent" ~ "High school graduate (or equivalent)",
variable == "some_college" ~ "Some college, no degree",
variable == "associate" ~ "Associate's degree",
variable == "bachelor" ~ "Bachelor's degree",
variable == "graduate" ~ "Graduate or professional degree"))
estimate <- get_estimate_table(census_data_step2)
moe <- get_moe_table(census_data_step2)
return(list(estimate = estimate, moe = moe))
}
acs_data_education_county <- get_acs_education("county", acs_year)
tst <- acs_data_education_county
tst <- acs_data_education_county$moe
View(tst)
acs_data_education_cur <- get_acs_education("county subdivision", acs_year)
acs_data_education_state <- get_acs_education("state", acs_year)
tst <- acs_data_education_cur$moe
View(tst)
tst <- acs_data_education_state$moe
#building structure info
get_acs_structure_type <- function(geo_type, year) {
census_data_step1 <- get_acs(
geography = geo_type,
variables = acs_var_structure_type,
year = year,
output = "wide",
state = state,
county = county,
survey = "acs5",
geometry = F
) %>%
#calculate aggregate estimates
get_est_moe_sums(sum_names = c("1_unit_detached", "1_unit_attached", "multiple_family", "mobile_other"),
sum_cols = list(c("B25024_002"),
c("B25024_003"),
c("B25024_004", "B25024_005", "B25024_006", "B25024_007", "B25024_008", "B25024_009"),
c("B25024_010", "B25024_011"))) %>%
select(GEOID, NAME, B25024_001E, B25024_001M, starts_with("est"), starts_with("moe")) %>%
rename(summary_est = B25024_001E,
summary_moe = B25024_001M)
#transform data for easier MOE calculation
census_data_step2 <- census_data_step1 %>%
wide_to_narrow() %>%
mutate(
estimate_prop = estimate/summary_est * 100,
moe_prop = moe_prop(estimate, summary_est, moe, summary_moe)*100) %>%
get_cv_reliability() %>%
#rename variables
mutate(variable = case_when(variable == "1_unit_detached" ~ "1 unit, detached",
variable == "1_unit_attached" ~ "1 unit, attached",
variable == "multiple_family" ~ "Multiple family",
variable == "mobile_other" ~ "Mobile home/other"
))
estimate <- get_estimate_table(census_data_step2)
moe <- get_moe_table(census_data_step2)
return(list(estimate = estimate, moe = moe))
}
acs_data_structure_type_cur <- get_acs_structure_type("county subdivision", acs_year)
acs_data_structure_type_county <- get_acs_structure_type("county", acs_year)
acs_data_structure_type_state <- get_acs_structure_type("state", acs_year)
tst <- acs_data_structure_type_county$moe
View(tst)
data_muni <- decennial_data_age_cur %>%
left_join(decennial_data_age_graph_cur, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_race_nh_cur, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_race_cur, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_education_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_income_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_employment_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_structure_year_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_homeowner_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_home_value_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_cost_burden_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_labor_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_poverty_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_structure_type_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_vacancy_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_avg_hh_cur$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(historic_pop_muni, join_by(NAME == CTY_SUB)) %>%
left_join(decennial_last_data_age_cur, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_last_data_age_graph_cur, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_housing_units_cur, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_housing_units_cur_2010, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_housing_units_cur_2000, join_by(GEOID == GEOID, NAME == NAME))
data_county <- decennial_data_age_county %>%
left_join(decennial_data_age_graph_county, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_race_nh_county, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_race_county, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_education_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_income_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_employment_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_structure_year_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_homeowner_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_home_value_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_cost_burden_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_labor_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_poverty_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_structure_type_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_vacancy_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_avg_hh_county$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
bind_cols(historic_pop_county) %>%
left_join(decennial_last_data_age_county, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_last_data_age_graph_county, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_housing_units_county, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_housing_units_county_2010, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_housing_units_county_2000, join_by(GEOID == GEOID, NAME == NAME)) %>%
select(-GEOID) %>%
mutate(NAME = "Dane County")
data_state <- decennial_data_age_state %>%
left_join(decennial_data_age_graph_state, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_race_nh_state, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_race_state, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_education_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_income_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_employment_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_structure_year_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_homeowner_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_home_value_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_cost_burden_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_labor_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_poverty_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_structure_type_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_vacancy_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(acs_data_avg_hh_state$estimate, join_by(GEOID == GEOID, NAME == NAME)) %>%
bind_cols(historic_pop_state) %>%
left_join(decennial_last_data_age_state, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_last_data_age_graph_state, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_housing_units_state, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_housing_units_state_2010, join_by(GEOID == GEOID, NAME == NAME)) %>%
left_join(decennial_data_housing_units_state_2000, join_by(GEOID == GEOID, NAME == NAME)) %>%
select(-GEOID) %>%
mutate(NAME = "State of Wisconsin")
#utility function to finish up making the MOE tables
clean_moe_table <- function(df) {
df <- df %>%
left_join(var_info, join_by(variable == Variable)) %>%
mutate(across(c(estimate, moe, cv), ~ round(.x, 2))) %>%
rename(Estimate = estimate,
MOE = moe,
CV = cv,
Reliability = reliability,
Variable = variable) %>%
select(NAME, Census, Topic, Variable, Estimate, MOE, CV, Reliability)
return(df)
}
var_info <- read.csv("census_variables.csv")
moe_report_muni <- bind_rows(list(acs_data_education_cur$moe, acs_data_income_cur$moe, acs_data_employment_cur$moe,
acs_data_structure_year_cur$moe, acs_data_homeowner_cur$moe, acs_data_home_value_cur$moe,
acs_data_cost_burden_cur$moe, acs_data_labor_cur$moe, acs_data_poverty_cur$moe,
acs_data_structure_type_cur$moe, acs_data_vacancy_cur$moe, acs_data_avg_hh_cur$moe)) %>%
clean_moe_table()
moe_report_county <- bind_rows(list(acs_data_education_county$moe, acs_data_income_county$moe, acs_data_employment_county$moe,
acs_data_structure_year_county$moe, acs_data_homeowner_county$moe, acs_data_home_value_county$moe,
acs_data_cost_burden_county$moe, acs_data_labor_county$moe, acs_data_poverty_county$moe,
acs_data_structure_type_county$moe, acs_data_vacancy_county$moe, acs_data_avg_hh_county$moe)) %>%
select(-GEOID) %>%
mutate(NAME = "Dane County") %>%
clean_moe_table()
moe_report_state <- bind_rows(list(acs_data_education_state$moe, acs_data_income_state$moe, acs_data_employment_state$moe,
acs_data_structure_year_state$moe, acs_data_homeowner_state$moe, acs_data_home_value_state$moe,
acs_data_cost_burden_state$moe, acs_data_labor_state$moe, acs_data_poverty_state$moe,
acs_data_structure_type_state$moe, acs_data_vacancy_state$moe, acs_data_avg_hh_state$moe)) %>%
select(-GEOID) %>%
mutate(NAME = "State of Wisconsin") %>%
clean_moe_table()
View(moe_report_county)
View(moe_report_county)
library(dplyr)
library(here)
library(sf)
library(shiny)
library(officedown)
library(tidycensus)
library(stringr)
library(tidyr)
library(ggplot2)
library(mschart)
library(officer)
library(flextable)
shinyApp(ui, server)
#for testing
data_muni_f <- data_muni %>%
filter(NAME == "Albion town, Dane County, Wisconsin") %>%
select(-GEOID) %>%
mutate(NAME = "Town of Albion")
all_data <- data_muni_f %>%
#join all the data into one df
bind_rows(data_county,
data_state) %>%
#transform to easily pull data for tables
pivot_longer(2:ncol(data_muni_f)) %>%
mutate(value = round(value, 2)) %>%
rename(name = NAME,
Variable = name) %>%
pivot_wider(values_from = value)
View(all_data)
knitr::opts_chunk$set(echo = TRUE, fig.cap = TRUE)
library(officedown)
library(officer)
library(dplyr)
library(stringr)
# fp <- fp_par(
#   text.align = "center",
#   padding.bottom = 20, padding.top = 120,
#   border.bottom = fp_border(style = "none"),
#   border.left = fp_border(style = "none"))
#
# ft <- fp_text(shading.color='#EFEFEF', bold = TRUE)
fp_text_data <- fp_text(font.size = 9)
fp_text_label <- fp_text(font.size = 10)
fp_text_title <- fp_text(font.size = 12)
chart_default_theme <- mschart_theme(
main_title = fp_text(font.size = 12),
axis_title_x = fp_text(font.size = 10),
axis_title_y = fp_text(font.size = 10),
legend_text = fp_text(font.size = 9),
grid_major_line_x = fp_border(color = "#D9D9D9", style = "solid", "width" = .75),
grid_major_line_y = fp_border(color = "#D9D9D9", style = "solid", "width" = .75)
)
#structure_age_data <- params$data %>%
structure_type_data <- all_data %>%
slice(152:155)
structure_type_data
paste0(structure_type_data$Variable, collapse = ",")
structure_type_data <- c(
"1 unit, detached",
"1 unit, attached",
"Multiple family",
"Mobile home/other"
)
structure_type_vars <- c(
"1 unit, detached",
"1 unit, attached",
"Multiple family",
"Mobile home/other"
)
#structure_age_data <- params$data %>%
structure_type_data <- all_data %>%
filter(Variable %in% structure_type_vars) %>%
flextable(structure_age_data %>%
#only use muni data
select(1:2) %>%
#format with comma thousand separator
mutate(across(2:2, ~ str_trim(format(.x, big.mark = ",", scientific = FALSE))))) %>%
set_caption("Age of Housing Stock (%)") %>%
autofit(add_w = 0)
#structure_age_data <- params$data %>%
structure_type_data <- all_data %>%
filter(Variable %in% structure_type_vars)
View(structure_type_data)
shinyApp(ui, server)
vacancy_vars <- c(
"Homeowner vacancy",
"Rental vacancy"
)
vacancy_data <- all_data %>%
filter(Variable %in% vacancy_vars)
View(vacancy_data)
flextable(vacancy_data) %>%
set_caption("Housing Vacancy (%)") %>%
autofit(add_w = 0)
shinyApp(ui, server)
shinyApp(ui, server)
library(dplyr)
library(here)
library(sf)
library(shiny)
library(officedown)
library(tidycensus)
library(stringr)
library(tidyr)
library(ggplot2)
library(mschart)
library(officer)
library(flextable)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
?withProgress
server <- function(input, output) {
output$download_word_document <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = function() {
paste0("Report-", gsub(" ", "-", input$muni_choices), "-", Sys.Date(), ".docx")
},
content = function(file) {
withProgress(value = 0, message = 'Creating report, please wait!',  {
#find the census name of the selected geography
muni_chosen <- muni_crosswalk %>%
filter(muni_name == input$muni_choices) %>%
select(census_name) %>%
paste()
#the filtered census data
data_muni_f <- data_muni %>%
filter(NAME == muni_chosen) %>%
select(-GEOID) %>%
mutate(NAME = input$muni_choices)
#for testing
# data_muni_f <- data_muni %>%
#   filter(NAME == "Albion town, Dane County, Wisconsin") %>%
#   select(-GEOID) %>%
#   mutate(NAME = "Town of Albion")
all_data <- data_muni_f %>%
#join all the data into one df
bind_rows(data_county,
data_state) %>%
#transform to easily pull data for tables
pivot_longer(2:ncol(data_muni_f)) %>%
mutate(value = round(value, 2)) %>%
rename(name = NAME,
Variable = name) %>%
pivot_wider(values_from = value)
data_moe_f <- moe_report_muni %>%
filter(NAME == muni_chosen) %>%
mutate(NAME = input$muni_choices) %>%
select(-NAME, -Census)
# Set up parameters to pass to Rmd document
params <- list(muni = input$muni_choices,
data = all_data,
moe_reports = list(muni = data_moe_f, county = moe_report_county %>% select(-NAME, -Census), state = moe_report_state %>%  select(-NAME, -Census)))
rmarkdown::render("template.Rmd", output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
})
}
)
}
View(muni_crosswalk)
